# Bot.py

from vkbottle.bot import Bot, Message
from vkbottle import Keyboard, KeyboardButtonColor, Text, EMPTY_KEYBOARD
from vkbottle import PhotoMessageUploader
from vkbottle import BaseStateGroup
from vkbottle import CtxStorage
from BotToken import bot_token
import importlib
import curs, curs_usd
from qrgenerator import qr_generate_transactions, qr_generate_personal
from headline import create_headline
import os
from datetime import datetime


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token = bot_token)
ctx = CtxStorage()


# –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥"
kb_default = Keyboard()
kb_default.add(Text("–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π QR-–∫–æ–¥"), color = KeyboardButtonColor.PRIMARY)
kb_default.row()
kb_default.add(Text("–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"))

# –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
kb_cancel = Keyboard()
kb_cancel.add(Text("–û—Ç–º–µ–Ω–∞"), color = KeyboardButtonColor.NEGATIVE)

# –ö–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
kb_cancel_continue = Keyboard()
kb_cancel_continue.add(Text("–û—Ç–º–µ–Ω–∞"), color = KeyboardButtonColor.NEGATIVE)
kb_cancel_continue.add(Text("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))

# –ö–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç
kb_currencies = Keyboard()
kb_currencies.add(Text("–í–≤–µ—Å—Ç–∏ –≤ —Ä—É–±–ª—è—Ö(‚ÇΩ)"), color = KeyboardButtonColor.POSITIVE)
kb_currencies.add(Text("–í–≤–µ—Å—Ç–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö($)"), color = KeyboardButtonColor.POSITIVE)
kb_currencies.row()
kb_currencies.add(Text("–û—Ç–º–µ–Ω–∞"), color = KeyboardButtonColor.NEGATIVE)
kb_currencies.add(Text("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ª–∏—á–Ω–æ–≥–æ QR-–∫–æ–¥–∞
class GenerateQR(BaseStateGroup):
	get_data = 0


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
class Requisites(BaseStateGroup):
	address = 1
	public_key = 2
	amount = 3
	amount_dollars = 4
	amount_rubles = 5
	comment = 6


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—á–Ω–æ–≥–æ QR-–∫–æ–¥–∞
@bot.on.message(state = GenerateQR.get_data)
async def generate_personal_qr(message: Message):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await bot.state_dispenser.delete(message.peer_id)
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", keyboard = kb_default)

	else:
		await message.answer("QR-–∫–æ–¥ —Å–æ–∑–¥–∞—ë—Ç—Å—è...", keyboard = EMPTY_KEYBOARD)
		qr_generate_personal(message.text, f"{message.peer_id}.png")

		photo_upd = PhotoMessageUploader(bot.api)
		photo = await photo_upd.upload(f"{message.peer_id}.png")
		await message.answer(attachment = photo, keyboard = kb_default)

		os.remove(f"{message.peer_id}.png")
		await bot.state_dispenser.delete(message.peer_id)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
@bot.on.message(state = Requisites.address)
async def get_address(message: Message):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await bot.state_dispenser.delete(message.peer_id)
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", keyboard = kb_default)

	else:
		ctx.set("address", message.text)
		await bot.state_dispenser.set(message.peer_id, Requisites.public_key)
		await message.answer("–ï–≥–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á(Public key)", keyboard = kb_cancel_continue)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
@bot.on.message(state = Requisites.public_key)
async def get_public_key(message: Message):
	if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		ctx.set("pk", "")
		await bot.state_dispenser.set(message.peer_id, Requisites.amount)
		await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç(Amount)", keyboard = kb_currencies)

	elif message.text == "–û—Ç–º–µ–Ω–∞":
		await bot.state_dispenser.delete(message.peer_id)
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", keyboard = kb_default)

	else:
		ctx.set("pk", message.text)
		await bot.state_dispenser.set(message.peer_id, Requisites.amount)
		await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç(Amount)", keyboard = kb_currencies)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–º
@bot.on.message(state = Requisites.amount)
async def get_amount_prizms(message: Message):
	if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		ctx.set("amount", "")
		await bot.state_dispenser.set(message.peer_id, Requisites.comment)
		await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)", keyboard = kb_cancel_continue)

	elif message.text == "–û—Ç–º–µ–Ω–∞":
		await bot.state_dispenser.delete(message.peer_id)
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", keyboard = kb_default)

	elif message.text == "–í–≤–µ—Å—Ç–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö($)":
		await bot.state_dispenser.set(message.peer_id, Requisites.amount_dollars)
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö", keyboard = kb_cancel_continue)

	elif message.text == "–í–≤–µ—Å—Ç–∏ –≤ —Ä—É–±–ª—è—Ö(‚ÇΩ)":
		await bot.state_dispenser.set(message.peer_id, Requisites.amount_rubles)
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö", keyboard = kb_cancel_continue)

	else:
		ctx.set("amount", message.text)
		await bot.state_dispenser.set(message.peer_id, Requisites.comment)
		await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)", keyboard = kb_cancel_continue)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–º –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
@bot.on.message(state = Requisites.amount_dollars)
async def get_amount_dollars(message: Message):
	if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		ctx.set("amount", "")
		await bot.state_dispenser.set(message.peer_id, Requisites.comment)
		await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)", keyboard = kb_cancel_continue)

	elif message.text == "–û—Ç–º–µ–Ω–∞":
		await bot.state_dispenser.delete(message.peer_id)
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = kb_default)

	else:
		importlib.reload(curs_usd)
		pzm = message.text
		try:
			amount = float(pzm) / float(curs_usd.pzm_curs)
			amount = round(amount, 2)
			ctx.set("amount", str(amount))
			await message.answer(f"${message.text} = {amount} PZM")
			await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)")
			await bot.state_dispenser.set(message.peer_id, Requisites.comment)
		except:
			await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–º –≤ —Ä—É–±–ª—è—Ö
@bot.on.message(state = Requisites.amount_rubles)
async def get_amount_rubles(message: Message):
	if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		ctx.set("amount", "")
		await bot.state_dispenser.set(message.peer_id, Requisites.comment)
		await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)", keyboard = kb_cancel_continue)

	elif message.text == "–û—Ç–º–µ–Ω–∞":
		await bot.state_dispenser.delete(message.peer_id)
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup = kb_default)

	else:
		importlib.reload(curs_usd)
		pzm = message.text
		try:
			amount = float(pzm) / float(curs.pzm_curs)
			amount = round(amount, 2)
			ctx.set("amount", str(amount))
			await message.answer(f"‚ÇΩ{message.text} = {amount} PZM")
			await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(Comment)")
			await bot.state_dispenser.set(message.peer_id, Requisites.comment)
		except:
			await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
@bot.on.message(state = Requisites.comment)
async def generate_qr_for_transaction(message: Message):
	if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
		ctx.set("comment", "")

	elif message.text == "–û—Ç–º–µ–Ω–∞":
		await bot.state_dispenser.delete(message.peer_id)
		await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", keyboard = kb_default)
		return None

	else:
		ctx.set("comment", message.text)
	
	await message.answer("QR-–∫–æ–¥ —Å–æ–∑–¥–∞—ë—Ç—Å—è...", keyboard = EMPTY_KEYBOARD)

	data_qr = {
		"address": "",
		"pk": "",
		"amount": "",
		"comment": ""
	}

	data_qr.update({"address": ctx.get("address")})
	data_qr.update({"pk": ctx.get("pk")})
	data_qr.update({"amount": ctx.get("amount")})
	data_qr.update({"comment": ctx.get("comment")})

	pzm_site = "https://wallet.prizm.space/?to="
	
	if data_qr["comment"] == "":
		qr_data = f"{pzm_site}{data_qr['address']}:{data_qr['pk']}:{data_qr['amount']}"
	else:
		qr_data = f"{pzm_site}{data_qr['address']}:{data_qr['pk']}:{data_qr['amount']}:{data_qr['comment']}"

	qr_generate_transactions(qr_data, f"{message.peer_id}.png")
	create_headline(data_qr["address"], message.peer_id)

	photo_upd = PhotoMessageUploader(bot.api)
	photo = await photo_upd.upload(f"{message.peer_id}.png")
	await message.answer(attachment = photo, keyboard = kb_default)


	os.remove(f"{message.peer_id}.png")

	ctx.delete("address")
	ctx.delete("pk")
	ctx.delete("amount")
	ctx.delete("comment")

	await bot.state_dispenser.delete(message.peer_id)


# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º –±–æ—Ç–∞
@bot.on.message()
async def default(message: Message):
	if message.text.lower() == "prizm":		
		await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", keyboard = kb_default)

	elif message.text == "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π QR-–∫–æ–¥":
		await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ", keyboard = kb_cancel)
		await bot.state_dispenser.set(message.peer_id, GenerateQR.get_data)

	elif message.text == "–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
		await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞(Address)", keyboard = kb_cancel)
		await bot.state_dispenser.set(message.peer_id, Requisites.address)

	else:
		await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µüëá", keyboard = kb_default)


time_now = datetime.today()
print(f"\n[{str(time_now)[:19]}]: –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

bot.run_forever()
